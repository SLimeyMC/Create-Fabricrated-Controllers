plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
        maven { url = uri("https://thedarkcolour.github.io/KotlinForForge/") }
    }
}

dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")
    // Remove the next line if you don't want to depend on the API
    modApi("dev.architectury:architectury-forge:${rootProject.architectury_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Create
    modImplementation("com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_forge_version}") { transitive = false }

    // CC Tweaked
    modRuntimeOnly("maven.modrinth:cc-tweaked:${rootProject.minecraft_version}-${rootProject.cc_tweaked_version}")

    // Controllable
    modRuntimeOnly("curse.maven:controllable-317269:${rootProject.controllable_version}")

    // Recipe viewer
    modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
